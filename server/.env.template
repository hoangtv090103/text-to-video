# Text-to-Video Service Environment Configuration
# Copy this file to .env and fill in your actual values

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0

# TTS Service Configuration (Chatterbox TTS API)
TTS_SERVICE_URL=http://chatterbox-tts:4123/v1/audio/speech

# LLM Service Configuration (Google Gemini)
# Get your API key from: https://ai.google.dev/
LLM_URL=https://generativelanguage.googleapis.com/v1beta/openai/
LLM_API_KEY=your_google_gemini_api_key_here

# Logging Configuration
LOG_LEVEL=INFO

# # AWS S3 Configuration for Asset Storage
# # Create an S3 bucket and IAM user with S3 permissions
# AWS_ACCESS_KEY_ID=your_aws_access_key_here
# AWS_SECRET_ACCESS_KEY=your_aws_secret_key_here
# AWS_REGION=us-east-1
# S3_BUCKET_NAME=text-to-video-assets

# # Optional: For local development with MinIO
# # S3_ENDPOINT_URL=http://localhost:9000

# # Frontend Configuration
# FRONTEND_PORT=4321

# # Chatterbox TTS Configuration
# PORT=4123
# HOST=0.0.0.0
# EXAGGERATION=0.5
# CFG_WEIGHT=0.5
# TEMPERATURE=0.8
# MAX_CHUNK_LENGTH=280
# MAX_TOTAL_LENGTH=3000
# DEVICE=auto
# MODEL_CACHE_DIR=/cache
# VOICE_LIBRARY_DIR=/voices
# MEMORY_CLEANUP_INTERVAL=5
# CUDA_CACHE_CLEAR_INTERVAL=3
# ENABLE_MEMORY_MONITORING=true

# # Voice samples configuration
# VOICE_SAMPLE_HOST_PATH=./voice-sample.mp3
# VOICE_SAMPLES_DIR=./voice-samples

# # =====================================
# # SETUP INSTRUCTIONS
# # =====================================

# # 1. GOOGLE GEMINI API SETUP:
# #    - Go to https://ai.google.dev/
# #    - Create a new project or select existing
# #    - Enable the Gemini API
# #    - Create an API key
# #    - Replace 'your_google_gemini_api_key_here' with your actual key

# # 2. AWS S3 SETUP:
# #    - Create an AWS account if you don't have one
# #    - Create an S3 bucket (name must be globally unique)
# #    - Create an IAM user with programmatic access
# #    - Attach AmazonS3FullAccess policy to the user
# #    - Replace the AWS credentials above with your actual values
# #    - Update S3_BUCKET_NAME with your bucket name

# # 3. LOCAL DEVELOPMENT WITH MINIO (OPTIONAL):
# #    - Install MinIO: https://docs.min.io/docs/minio-quickstart-guide.html
# #    - Start MinIO: minio server /data
# #    - Create a bucket named 'text-to-video-assets'
# #    - Uncomment S3_ENDPOINT_URL line above
# #    - Use MinIO credentials for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY

# # 4. VOICE SAMPLES:
# #    - Place your voice sample file at the path specified in VOICE_SAMPLE_HOST_PATH
# #    - Ensure the voice-samples directory exists if using custom voices

# # 5. DOCKER SETUP:
# #    - Make sure Docker and Docker Compose are installed
# #    - Run: docker-compose --profile frontend up --build
# #    - The application will be available at:
# #      - Backend API: http://localhost:8000
# #      - Frontend UI: http://localhost:4321
# #      - TTS Service: http://localhost:4123

# # 6. TESTING:
# #    - Run health checks: curl http://localhost:8000/health
# #    - Test LLM service: python server/test_llm.py
# #    - Generate video: POST to http://localhost:8000/api/v1/video/generate

# # =====================================
# # SECURITY NOTES
# # =====================================

# # - Never commit this file with real credentials to version control
# # - Use environment-specific .env files for different deployments
# # - Consider using AWS IAM roles instead of access keys in production
# # - Rotate API keys and credentials regularly
# # - Use HTTPS in production environments
